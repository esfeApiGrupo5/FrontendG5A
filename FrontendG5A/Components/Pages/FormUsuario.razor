@page "/usuarios"
@using FrontendG5A.DTO
@using FrontendG5A.Services
@inject AuthService AuthService
@inject UsuarioService UsuarioService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="container my-4">
    <div class="row">
        <h1 class="mb-4 text-center text-primary fw-bold">Gestión de Usuarios</h1>
        
        <div class="col-12 mb-4 p-4 rounded-3 shadow-sm" style="background-color: #f8f9fa;">
            <div class="d-flex align-items-center gap-3">
                
                <div class="flex-grow-1">
                    <label for="terminoBusqueda" class="form-label visually-hidden">Buscar por nombre</label>
                    <input type="text" 
                           class="form-control form-control-lg" 
                           id="terminoBusqueda"
                           placeholder="Buscar por nombre..."
                           @bind="TerminoBusqueda" 
                           @onkeypress="OnKeyPressBusqueda" />
                </div>
                
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary btn-lg" type="button" @onclick="BuscarUsuarios">
                        <i class="bi bi-search"></i> Buscar
                    </button>
                    <button class="btn btn-outline-secondary btn-lg" type="button" @onclick="LimpiarBusqueda">
                        <i class="bi bi-x-circle"></i> Limpiar
                    </button>
                    <button class="btn btn-outline-success btn-lg" @onclick="MostrarModalCrear">
                        <i class="bi bi-plus-circle"></i> Nuevo
                    </button>
                </div>
            </div>
        </div>

        <div class="col-12">
            @if (CargandoBusqueda)
            {
                <div class="text-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Buscando...</span>
                    </div>
                    <p class="mt-2 text-primary">Buscando...</p>
                </div>
            }
            else if (Usuarios == null)
            {
                <p class="alert alert-info p-3"><em>Cargando usuarios...</em></p>
            }
            else if (Usuarios.Count == 0)
            {
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    @if (!string.IsNullOrEmpty(TerminoBusqueda))
                    {
                        <text>No se encontraron usuarios que coincidan con "<strong>@TerminoBusqueda</strong>".</text>
                    }
                    else
                    {
                        <text>No hay usuarios disponibles. ¡Crea el primero! 🚀</text>
                    }
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    @foreach (var usuario in Usuarios)
                    {
                        <div class="col">
                            <div class="card h-100 border-primary shadow-lg">
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title fw-bold text-primary">@usuario.Nombre</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">ID: @usuario.Id</h6>
                                    
                                    <p class="card-text">
                                        <strong>Correo:</strong> @usuario.Correo
                                    </p>
                                    <p class="card-text">
                                        <strong>Estado:</strong> 
                                        <span class="badge @(usuario.Estado == 1 ? "bg-success" : "bg-danger")">
                                            @usuario.EstadoTexto
                                        </span>
                                    </p>
                                    <p class="card-text">
                                        <strong>Rol:</strong> @(usuario.Rol?.Nombre ?? "Sin rol")
                                    </p>
                                    
                                    <div class="mt-auto d-grid gap-2">
                                        <button class="btn btn-outline-secondary" @onclick="() => VerDetalleUsuario(usuario.Id)">
                                            <i class="bi bi-eye"></i> Detalles
                                        </button>
                                        <button class="btn btn-outline-warning text-dark" @onclick="() => MostrarModalEditarUsuario(usuario)">
                                            <i class="bi bi-pencil-square"></i> Editar
                                        </button>
                                        <button class="btn btn-outline-danger" @onclick="() => ConfirmarEliminar(usuario)">
                                            <i class="bi bi-trash"></i> Eliminar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(MensajeError))
{
    <div class="alert alert-danger alert-dismissible fade show">
        @MensajeError
        <button type="button" class="btn-close" @onclick="() => MensajeError = string.Empty"></button>
    </div>
}

@if (!string.IsNullOrEmpty(MensajeExito))
{
    <div class="alert alert-success alert-dismissible fade show">
        @MensajeExito
        <button type="button" class="btn-close" @onclick="() => MensajeExito = string.Empty"></button>
    </div>
}

<!-- Modal Crear Usuario -->
<div class="modal fade @(MostrarModalNuevo ? "show" : "")" style="display: @(MostrarModalNuevo ? "block" : "none"); background-color: rgba(0,0,0,0.5);" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content card shadow-lg border-primary">
            <EditForm Model="UsuarioNuevo" OnValidSubmit="CrearUsuario">
                <DataAnnotationsValidator />
                
                <div class="modal-header bg-primary text-white card-header">
                    <h5 class="modal-title mb-0 fw-bold">Crear Nuevo Usuario</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModalCrear"></button>
                </div>
                
                <div class="modal-body">
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Nombre <small class="text-muted">(entre 3 y 50 caracteres)</small></label>
                        <InputText class="form-control" @bind-Value="UsuarioNuevo.Nombre" maxlength="50" placeholder="Nombre completo"/>
                        <ValidationMessage For="@(() => UsuarioNuevo.Nombre)" />
                        <div class="form-text">@(UsuarioNuevo.Nombre?.Length ?? 0)/50 caracteres</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Correo Electrónico</label>
                        <InputText class="form-control" @bind-Value="UsuarioNuevo.Correo" type="email" placeholder="usuario@ejemplo.com"/>
                        <ValidationMessage For="@(() => UsuarioNuevo.Correo)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Contraseña <small class="text-muted">(mínimo 6 caracteres)</small></label>
                        <InputText class="form-control" type="password" @bind-Value="UsuarioNuevo.Password" maxlength="100" placeholder="Contraseña"/>
                        <ValidationMessage For="@(() => UsuarioNuevo.Password)" />
                        <div class="form-text">@(UsuarioNuevo.Password?.Length ?? 0)/100 caracteres</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Estado</label>
                        <InputSelect class="form-select" @bind-Value="UsuarioNuevo.Estado">
                            <option value="1">Activo</option>
                            <option value="0">Inactivo</option>
                        </InputSelect>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Rol</label>
                        <InputNumber class="form-control" @bind-Value="UsuarioNuevo.IdRol" placeholder="ID del rol (ej: 1, 2, 3)"/>
                        <ValidationMessage For="@(() => UsuarioNuevo.IdRol)" />
                        <div class="form-text">Ingrese el ID del rol correspondiente</div>
                    </div>
                    
                </div>
                
                <div class="modal-footer d-flex justify-content-end gap-2">
                    
                    <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="CerrarModalCrear">
                        <i class="bi bi-x-circle"></i> Cancelar
                    </button>

                    <button type="submit" class="btn btn-primary btn-lg" disabled="@GuardandoUsuario">
                        @if (GuardandoUsuario)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        <i class="bi bi-save"></i> Crear Usuario
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal Editar Usuario -->
<div class="modal fade @(MostrarModalEditar ? "show" : "")" style="display: @(MostrarModalEditar ? "block" : "none"); background-color: rgba(0,0,0,0.5);" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content card shadow-lg border-primary">
            <EditForm Model="UsuarioEditando" OnValidSubmit="ModificarUsuario">
                <DataAnnotationsValidator />
                
                <div class="modal-header bg-primary text-white card-header">
                    <h5 class="modal-title mb-0 fw-bold">Editar Usuario</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModalEditar"></button>
                </div>
                
                <div class="modal-body">
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Nombre <small class="text-muted">(entre 3 y 50 caracteres)</small></label>
                        <InputText class="form-control" @bind-Value="UsuarioEditando.Nombre" maxlength="50" placeholder="Nombre completo" />
                        <ValidationMessage For="@(() => UsuarioEditando.Nombre)" />
                        <div class="form-text">@(UsuarioEditando.Nombre?.Length ?? 0)/50 caracteres</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Correo Electrónico</label>
                        <InputText class="form-control" @bind-Value="UsuarioEditando.Correo" type="email" placeholder="usuario@ejemplo.com" />
                        <ValidationMessage For="@(() => UsuarioEditando.Correo)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Contraseña <small class="text-muted">(mínimo 6 caracteres)</small></label>
                        <InputText class="form-control" type="password" @bind-Value="UsuarioEditando.Password" maxlength="100" placeholder="Nueva contraseña" />
                        <ValidationMessage For="@(() => UsuarioEditando.Password)" />
                        <div class="form-text">@(UsuarioEditando.Password?.Length ?? 0)/100 caracteres</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Estado</label>
                        <InputSelect class="form-select" @bind-Value="UsuarioEditando.Estado">
                            <option value="1">Activo</option>
                            <option value="0">Inactivo</option>
                        </InputSelect>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Rol</label>
                        <InputNumber class="form-control" @bind-Value="UsuarioEditando.IdRol" placeholder="ID del rol (ej: 1, 2, 3)" />
                        <ValidationMessage For="@(() => UsuarioEditando.IdRol)" />
                        <div class="form-text">Ingrese el ID del rol correspondiente</div>
                    </div>
                    
                </div>
                
                <div class="modal-footer d-flex justify-content-end gap-2">
                    
                    <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="CerrarModalEditar">
                        <i class="bi bi-x-circle"></i> Regresar
                    </button>

                    <button type="submit" class="btn btn-outline-primary btn-lg" disabled="@GuardandoUsuario">
                        @if (GuardandoUsuario)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        <i class="bi bi-save"></i> Guardar Cambios
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (MostrarModalNuevo || MostrarModalEditar)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<UsuarioDTO>? Usuarios;
    private string TerminoBusqueda = string.Empty;
    private bool CargandoBusqueda = false;
    private string MensajeError = string.Empty;
    private string MensajeExito = string.Empty;

    // Modal Crear
    private bool MostrarModalNuevo = false;
    private UsuarioCrearDTO UsuarioNuevo = new();
    private bool GuardandoUsuario = false;

    // Modal Editar
    private bool MostrarModalEditar = false;
    private UsuarioModificarDTO UsuarioEditando = new();

    protected override async Task OnInitializedAsync()
    {
        await ConfigurarAutenticacion();
        await CargarUsuarios();
    }

    private async Task ConfigurarAutenticacion()
    {
        var token = await AuthService.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            await AuthService.SetToken(token);
        }
    }

    private async Task CargarUsuarios()
    {
        try
        {
            Usuarios = await UsuarioService.ObtenerUsuariosAsync();
            if (Usuarios == null)
            {
                Usuarios = new List<UsuarioDTO>();
                MensajeError = "No se pudieron cargar los usuarios. Verifica tu conexión.";
            }
        }
        catch (Exception ex)
        {
            MensajeError = $"Error al cargar usuarios: {ex.Message}";
            Usuarios = new List<UsuarioDTO>();
        }
    }

    private async Task BuscarUsuarios()
    {
        CargandoBusqueda = true;
        MensajeError = string.Empty; // Limpiar errores previos

        try
        {
            Usuarios = await UsuarioService.BuscarUsuariosPorNombreAsync(TerminoBusqueda.Trim());

            if (Usuarios == null)
            {
                Usuarios = new List<UsuarioDTO>();
                MensajeError = "Error en la búsqueda. Intenta nuevamente.";
            }
        }
        catch (Exception ex)
        {
            MensajeError = $"Error en la búsqueda: {ex.Message}";
            Usuarios = new List<UsuarioDTO>();
        }
        finally
        {
            CargandoBusqueda = false;
        }
    }

    private async Task LimpiarBusqueda()
    {
        TerminoBusqueda = string.Empty;
        await CargarUsuarios();
    }

    private async Task OnKeyPressBusqueda(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await BuscarUsuarios();
        }
    }

    // Métodos del Modal Crear
    private void MostrarModalCrear()
    {
        UsuarioNuevo = new UsuarioCrearDTO();
        MostrarModalNuevo = true;
    }

    private void CerrarModalCrear()
    {
        MostrarModalNuevo = false;
        UsuarioNuevo = new UsuarioCrearDTO();
    }

    private async Task CrearUsuario()
    {
        GuardandoUsuario = true;

        var resultado = await UsuarioService.CrearUsuarioAsync(UsuarioNuevo);

        if (resultado)
        {
            MensajeExito = "Usuario creado exitosamente";
            CerrarModalCrear();
            await CargarUsuarios();
        }
        else
        {
            MensajeError = "Error al crear el usuario. Intenta nuevamente.";
        }

        GuardandoUsuario = false;
    }

    // Métodos del Modal Editar
    private void MostrarModalEditarUsuario(UsuarioDTO usuario)
    {
        UsuarioEditando = new UsuarioModificarDTO
        {
            Id = usuario.Id,
            Nombre = usuario.Nombre ?? string.Empty,
            Correo = usuario.Correo ?? string.Empty,
            Password = string.Empty, // Se debe ingresar una nueva contraseña
            Estado = usuario.Estado,
            IdRol = usuario.Rol?.Id ?? 1
        };
        MostrarModalEditar = true;
    }

    private void CerrarModalEditar()
    {
        MostrarModalEditar = false;
        UsuarioEditando = new UsuarioModificarDTO();
    }

    private async Task ModificarUsuario()
    {
        GuardandoUsuario = true;

        var resultado = await UsuarioService.ModificarUsuarioAsync(UsuarioEditando);

        if (resultado)
        {
            MensajeExito = "Usuario modificado exitosamente";
            CerrarModalEditar();
            await CargarUsuarios();
        }
        else
        {
            MensajeError = "Error al modificar el usuario. Intenta nuevamente.";
        }

        GuardandoUsuario = false;
    }

    // Método para ver detalles
    private void VerDetalleUsuario(int id)
    {
        Navigation.NavigateTo($"/usuario/{id}");
    }

    // Método para confirmar eliminación
    private async Task ConfirmarEliminar(UsuarioDTO usuario)
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm",
            $"¿Estás seguro de que deseas eliminar el usuario '{usuario.Nombre}'?");

        if (confirmado)
        {
            var resultado = await UsuarioService.EliminarUsuarioAsync(usuario.Id);

            if (resultado)
            {
                MensajeExito = $"Usuario '{usuario.Nombre}' eliminado exitosamente";
                await CargarUsuarios();
            }
            else
            {
                MensajeError = "Error al eliminar el usuario. Intenta nuevamente.";
            }
        }
    }
}