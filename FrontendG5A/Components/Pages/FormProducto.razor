@page "/productos"
@using FrontendG5A.DTO
@using FrontendG5A.Services
@inject AuthService AuthService
@inject ProductoService ProductoService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="container my-4">
    <div class="row">
        <h1 class="mb-4 text-center text-warning fw-bold">Gestión de Productos</h1>

        <div class="col-12 mb-4 p-4 rounded-3 shadow-sm" style="background-color: #f8f9fa;">
            <div class="d-flex align-items-center gap-3">

                <div class="flex-grow-1">
                    <label for="terminoBusqueda" class="form-label visually-hidden">Buscar por nombre</label>
                    <input type="text"
                           class="form-control form-control-lg"
                           id="terminoBusqueda"
                           placeholder="Buscar por nombre..."
                           @bind="TerminoBusqueda"
                           @onkeypress="OnKeyPressBusqueda" />
                </div>

                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary btn-lg" type="button" @onclick="BuscarProductos">
                        <i class="bi bi-search"></i> Buscar
                    </button>
                    <button class="btn btn-outline-secondary btn-lg" type="button" @onclick="LimpiarBusqueda">
                        <i class="bi bi-x-circle"></i> Limpiar
                    </button>
                    <button class="btn btn-outline-warning btn-lg" @onclick="MostrarModalCrear">
                        <i class="bi bi-plus-circle"></i> Nuevo
                    </button>
                </div>
            </div>
        </div>

        <div class="col-12">
            @if (CargandoBusqueda)
            {
                <div class="text-center p-5">
                    <div class="spinner-border text-warning" role="status">
                        <span class="visually-hidden">Buscando...</span>
                    </div>
                    <p class="mt-2 text-warning">Buscando...</p>
                </div>
            }
            else if (Productos == null)
            {
                <p class="alert alert-info p-3"><em>Cargando productos...</em></p>
            }
            else if (Productos.Count == 0)
            {
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    @if (!string.IsNullOrEmpty(TerminoBusqueda))
                    {
                        <text>No se encontraron productos que coincidan con "<strong>@TerminoBusqueda</strong>".</text>
                    }
                    else
                    {
                        <text>No hay productos disponibles. ¡Crea el primero! 🚀</text>
                    }
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    @foreach (var producto in Productos)
                    {
                        <div class="col">
                            <div class="card h-100 border-warning shadow-lg">
                                @if (!string.IsNullOrEmpty(producto.UrlImagen))
                                {
                                    <img src="@producto.UrlImagenSegura"
                                         class="card-img-top"
                                         alt="@producto.Nombre"
                                         style="height: 200px; object-fit: cover;"
                                         onerror="this.onerror=null; this.src='https://via.placeholder.com/400x300?text=Imagen+No+Disponible';" />
                                }
                                else
                                {
                                    <div class="card-img-top d-flex align-items-center justify-content-center bg-light"
                                         style="height: 200px;">
                                        <div class="text-center">
                                            <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
                                            <p class="text-muted mt-2 mb-0">Sin imagen</p>
                                        </div>
                                    </div>
                                }

                      </div>
                </div>
               }
        </div>
            }
    </div>
</div>
</div>

@if (!string.IsNullOrEmpty(MensajeError))
{
    <div class="alert alert-danger alert-dismissible fade show">
        @MensajeError
        <button type="button" class="btn-close" @onclick="() => MensajeError = string.Empty"></button>
    </div>
}

@if (!string.IsNullOrEmpty(MensajeExito))
{
    <div class="alert alert-success alert-dismissible fade show">
        @MensajeExito
        <button type="button" class="btn-close" @onclick="() => MensajeExito = string.Empty"></button>
    </div>
}

<!-- Modal Crear Producto -->
<div class="modal fade @(MostrarModalNuevo ? "show" : "")" style="display: @(MostrarModalNuevo ? "block" : "none"); background-color: rgba(0,0,0,0.5);" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content card shadow-lg border-warning">
            <EditForm Model="ProductoNuevo" OnValidSubmit="CrearProducto">
                <DataAnnotationsValidator />

                <div class="modal-header bg-warning text-dark card-header">
                    <h5 class="modal-title mb-0 fw-bold">Crear Nuevo Producto</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalCrear"></button>
                </div>

                <div class="modal-body">

                    <div class="mb-3">
                        <label class="form-label fw-bold">Nombre <small class="text-muted">(entre 2 y 100 caracteres)</small></label>
                        <InputText class="form-control" @bind-Value="ProductoNuevo.Nombre" maxlength="100" placeholder="Nombre del producto" />
                        <ValidationMessage For="@(() => ProductoNuevo.Nombre)" />
                        <div class="form-text">@(ProductoNuevo.Nombre?.Length ?? 0)/100 caracteres</div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-bold">Precio</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <InputNumber class="form-control" @bind-Value="ProductoNuevo.Precio" step="0.01" placeholder="0.00" />
                            </div>
                            <ValidationMessage For="@(() => ProductoNuevo.Precio)" />
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-bold">Stock</label>
                            <InputNumber class="form-control" @bind-Value="ProductoNuevo.Stock" placeholder="Cantidad en stock" />
                            <ValidationMessage For="@(() => ProductoNuevo.Stock)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Categoría <small class="text-muted">(máximo 50 caracteres)</small></label>
                        <InputText class="form-control" @bind-Value="ProductoNuevo.Categoria" maxlength="50" placeholder="Categoría del producto" />
                        <ValidationMessage For="@(() => ProductoNuevo.Categoria)" />
                        <div class="form-text">@(ProductoNuevo.Categoria?.Length ?? 0)/50 caracteres</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Descripción <small class="text-muted">(entre 10 y 500 caracteres)</small></label>
                        <InputTextArea class="form-control" rows="4" @bind-Value="ProductoNuevo.Descripcion" maxlength="500" placeholder="Descripción del producto" />
                        <ValidationMessage For="@(() => ProductoNuevo.Descripcion)" />
                        <div class="form-text">@(ProductoNuevo.Descripcion?.Length ?? 0)/500 caracteres</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">URL de la Imagen</label>
                        <InputText class="form-control" @bind-Value="ProductoNuevo.UrlImagen" placeholder="https://ejemplo.com/imagen.jpg" />
                        <ValidationMessage For="@(() => ProductoNuevo.UrlImagen)" />
                        <div class="form-text">Ingrese la URL completa de la imagen del producto</div>
                    </div>

                </div>

                <div class="modal-footer d-flex justify-content-end gap-2">

                    <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="CerrarModalCrear">
                        <i class="bi bi-x-circle"></i> Cancelar
                    </button>

                    <button type="submit" class="btn btn-warning btn-lg" disabled="@GuardandoProducto">
                        @if (GuardandoProducto)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        <i class="bi bi-save"></i> Crear Producto
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal Editar Producto -->
<div class="modal fade @(MostrarModalEditar ? "show" : "")" style="display: @(MostrarModalEditar ? "block" : "none"); background-color: rgba(0,0,0,0.5);" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content card shadow-lg border-warning">
            <EditForm Model="ProductoEditando" OnValidSubmit="ModificarProducto">
                <DataAnnotationsValidator />

                <div class="modal-header bg-warning text-dark card-header">
                    <h5 class="modal-title mb-0 fw-bold">Editar Producto</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalEditar"></button>
                </div>

                <div class="modal-body">

                    <div class="mb-3">
                        <label class="form-label fw-bold">Nombre <small class="text-muted">(entre 2 y 100 caracteres)</small></label>
                        <InputText class="form-control" @bind-Value="ProductoEditando.Nombre" maxlength="100" placeholder="Nombre del producto" />
                        <ValidationMessage For="@(() => ProductoEditando.Nombre)" />
                        <div class="form-text">@(ProductoEditando.Nombre?.Length ?? 0)/100 caracteres</div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-bold">Precio</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <InputNumber class="form-control" @bind-Value="ProductoEditando.Precio" step="0.01" placeholder="0.00" />
                            </div>
                            <ValidationMessage For="@(() => ProductoEditando.Precio)" />
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-bold">Stock</label>
                            <InputNumber class="form-control" @bind-Value="ProductoEditando.Stock" placeholder="Cantidad en stock" />
                            <ValidationMessage For="@(() => ProductoEditando.Stock)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Categoría <small class="text-muted">(máximo 50 caracteres)</small></label>
                        <InputText class="form-control" @bind-Value="ProductoEditando.Categoria" maxlength="50" placeholder="Categoría del producto" />
                        <ValidationMessage For="@(() => ProductoEditando.Categoria)" />
                        <div class="form-text">@(ProductoEditando.Categoria?.Length ?? 0)/50 caracteres</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Descripción <small class="text-muted">(entre 10 y 500 caracteres)</small></label>
                        <InputTextArea class="form-control" rows="4" @bind-Value="ProductoEditando.Descripcion" maxlength="500" placeholder="Descripción del producto" />
                        <ValidationMessage For="@(() => ProductoEditando.Descripcion)" />
                        <div class="form-text">@(ProductoEditando.Descripcion?.Length ?? 0)/500 caracteres</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">URL de la Imagen</label>
                        <InputText class="form-control" @bind-Value="ProductoEditando.UrlImagen" placeholder="https://ejemplo.com/imagen.jpg" />
                        <ValidationMessage For="@(() => ProductoEditando.UrlImagen)" />
                        <div class="form-text">Ingrese la URL completa de la imagen del producto</div>
                    </div>

                </div>

                <div class="modal-footer d-flex justify-content-end gap-2">

                    <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="CerrarModalEditar">
                        <i class="bi bi-x-circle"></i> Regresar
                    </button>

                    <button type="submit" class="btn btn-outline-warning btn-lg" disabled="@GuardandoProducto">
                        @if (GuardandoProducto)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        <i class="bi bi-save"></i> Guardar Cambios
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (MostrarModalNuevo || MostrarModalEditar)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<ProductoDTO>? Productos;
    private string TerminoBusqueda = string.Empty;
    private bool CargandoBusqueda = false;
    private string MensajeError = string.Empty;
    private string MensajeExito = string.Empty;

    // Modal Crear
    private bool MostrarModalNuevo = false;
    private ProductoCrearDTO ProductoNuevo = new();
    private bool GuardandoProducto = false;

    // Modal Editar
    private bool MostrarModalEditar = false;
    private ProductoModificarDTO ProductoEditando = new();
    private int ProductoEditandoId = 0;

    protected override async Task OnInitializedAsync()
    {
        await ConfigurarAutenticacion();
        await CargarProductos();
    }

    private async Task ConfigurarAutenticacion()
    {
        var token = await AuthService.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            await AuthService.SetToken(token);
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            Productos = await ProductoService.ObtenerProductosAsync();
            if (Productos == null)
            {
                Productos = new List<ProductoDTO>();
                MensajeError = "No se pudieron cargar los productos. Verifica tu conexión.";
            }
        }
        catch (Exception ex)
        {
            MensajeError = $"Error al cargar productos: {ex.Message}";
            Productos = new List<ProductoDTO>();
        }
    }

    private async Task BuscarProductos()
    {
        CargandoBusqueda = true;
        MensajeError = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(TerminoBusqueda))
            {
                Productos = await ProductoService.ObtenerProductosAsync();
            }
            else
            {
                Productos = await ProductoService.BuscarProductosPorNombreAsync(TerminoBusqueda.Trim());
            }

            if (Productos == null)
            {
                Productos = new List<ProductoDTO>();
                MensajeError = "Error en la búsqueda. Intenta nuevamente.";
            }
        }
        catch (Exception ex)
        {
            MensajeError = $"Error en la búsqueda: {ex.Message}";
            Productos = new List<ProductoDTO>();
        }
        finally
        {
            CargandoBusqueda = false;
        }
    }

    private async Task LimpiarBusqueda()
    {
        TerminoBusqueda = string.Empty;
        await CargarProductos();
    }

    private async Task OnKeyPressBusqueda(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await BuscarProductos();
        }
    }

    // Métodos del Modal Crear
    private void MostrarModalCrear()
    {
        ProductoNuevo = new ProductoCrearDTO();
        MostrarModalNuevo = true;
    }

    private void CerrarModalCrear()
    {
        MostrarModalNuevo = false;
        ProductoNuevo = new ProductoCrearDTO();
    }

    private async Task CrearProducto()
    {
        GuardandoProducto = true;

        var resultado = await ProductoService.CrearProductoAsync(ProductoNuevo);

        if (resultado)
        {
            MensajeExito = "Producto creado exitosamente";
            CerrarModalCrear();
            await CargarProductos();
        }
        else
        {
            MensajeError = "Error al crear el producto. Intenta nuevamente.";
        }

        GuardandoProducto = false;
    }

    // Métodos del Modal Editar
    private void MostrarModalEditarProducto(ProductoDTO producto)
    {
        ProductoEditandoId = producto.Id;
        ProductoEditando = new ProductoModificarDTO
        {
            Id = producto.Id,
            Nombre = producto.Nombre ?? string.Empty,
            Precio = producto.Precio,
            Descripcion = producto.Descripcion ?? string.Empty,
            Stock = producto.Stock,
            Categoria = producto.Categoria ?? string.Empty,
            UrlImagen = producto.UrlImagen ?? string.Empty
        };
        MostrarModalEditar = true;
    }

    private void CerrarModalEditar()
    {
        MostrarModalEditar = false;
        ProductoEditando = new ProductoModificarDTO();
        ProductoEditandoId = 0;
    }

    private async Task ModificarProducto()
    {
        GuardandoProducto = true;

        var resultado = await ProductoService.ModificarProductoAsync(ProductoEditandoId, ProductoEditando);

        if (resultado)
        {
            MensajeExito = "Producto modificado exitosamente";
            CerrarModalEditar();
            await CargarProductos();
        }
        else
        {
            MensajeError = "Error al modificar el producto. Intenta nuevamente.";
        }

        GuardandoProducto = false;
    }

    // Método para ver detalles
    private void VerDetalleProducto(int id)
    {
        Navigation.NavigateTo($"/producto/{id}");
    }

    // Método para confirmar eliminación
    private async Task ConfirmarEliminar(ProductoDTO producto)
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm",
            $"¿Estás seguro de que deseas eliminar el producto '{producto.Nombre}'?");

        if (confirmado)
        {
            var resultado = await ProductoService.EliminarProductoAsync(producto.Id);

            if (resultado)
            {
                MensajeExito = $"Producto '{producto.Nombre}' eliminado exitosamente";
                await CargarProductos();
            }
            else
            {
                MensajeError = "Error al eliminar el producto. Intenta nuevamente.";
            }
        }
    }
}